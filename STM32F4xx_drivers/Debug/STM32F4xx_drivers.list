
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000864  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009fc  08000a04  00001a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009fc  080009fc  00001a04  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009fc  080009fc  00001a04  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009fc  08000a04  00001a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009fc  080009fc  000019fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a00  08000a00  00001a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a04  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a04  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b09  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003a8  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  000028e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a5  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000238f  00000000  00000000  00002a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014d7  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008b1b  00000000  00000000  000062e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000edfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002dc  00000000  00000000  0000ee44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0000f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009e4 	.word	0x080009e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080009e4 	.word	0x080009e4

080001d8 <delay>:

#include <stm32f411xx_gpio_driver.h>
#include <string.h>

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 250000; i++){
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
	}
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
	//GPIO_RegDef_t* pGPIOD_RegDef = GPIOH;
	// setup gpio to be input and mode to be pin 0
	GPIO_Handle_t GPIOButton;
	memset(&GPIOButton, 0, sizeof(GPIOButton));
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	220c      	movs	r2, #12
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fbba 	bl	800098c <memset>
	GPIOButton.pGPIOx = GPIOC;
 8000218:	4b14      	ldr	r3, [pc, #80]	@ (800026c <main+0x68>)
 800021a:	60fb      	str	r3, [r7, #12]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800021c:	2303      	movs	r3, #3
 800021e:	743b      	strb	r3, [r7, #16]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000220:	2304      	movs	r3, #4
 8000222:	747b      	strb	r3, [r7, #17]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000224:	2301      	movs	r3, #1
 8000226:	74fb      	strb	r3, [r7, #19]

	GPIO_Handle_t GPIOLed;
	memset(&GPIOLed, 0, sizeof(GPIOLed));
 8000228:	463b      	mov	r3, r7
 800022a:	220c      	movs	r2, #12
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fbac 	bl	800098c <memset>
	GPIOLed.pGPIOx = GPIOA;
 8000234:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <main+0x6c>)
 8000236:	603b      	str	r3, [r7, #0]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000238:	2301      	movs	r3, #1
 800023a:	717b      	strb	r3, [r7, #5]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800023c:	2306      	movs	r3, #6
 800023e:	713b      	strb	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 8000240:	2300      	movs	r3, #0
 8000242:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&GPIOButton);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f8f9 	bl	8000440 <GPIO_Init>
	GPIO_Init(&GPIOLed);
 800024e:	463b      	mov	r3, r7
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f8f5 	bl	8000440 <GPIO_Init>

	GPIO_PriorityConfig(IRQ_NUM_EXTI3, NVIC_IRQ_PRIO15);
 8000256:	210f      	movs	r1, #15
 8000258:	2009      	movs	r0, #9
 800025a:	f000 fb4b 	bl	80008f4 <GPIO_PriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NUM_EXTI3, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	2009      	movs	r0, #9
 8000262:	f000 fabf 	bl	80007e4 <GPIO_IRQInterruptConfig>

	while(1);
 8000266:	bf00      	nop
 8000268:	e7fd      	b.n	8000266 <main+0x62>
 800026a:	bf00      	nop
 800026c:	40020800 	.word	0x40020800
 8000270:	40020000 	.word	0x40020000

08000274 <EXTI3_IRQHandler>:
	}*/

}

void EXTI3_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	delay(); // 200 ms
 8000278:	f7ff ffae 	bl	80001d8 <delay>
	GPIO_IRQHandling(GPIO_PIN_3);
 800027c:	2003      	movs	r0, #3
 800027e:	f000 fb65 	bl	800094c <GPIO_IRQHandling>
	//GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_6, 1);
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_6);
 8000282:	2106      	movs	r1, #6
 8000284:	4802      	ldr	r0, [pc, #8]	@ (8000290 <EXTI3_IRQHandler+0x1c>)
 8000286:	f000 fa97 	bl	80007b8 <GPIO_ToggleOutputPin>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000

08000294 <EXTI0_IRQHandler>:
{
	return 0;
}*/

void EXTI0_IRQHandler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(0);
 8000298:	2000      	movs	r0, #0
 800029a:	f000 fb57 	bl	800094c <GPIO_IRQHandling>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	@ (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	@ (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	@ (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 fb63 	bl	800099c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff95 	bl	8000204 <main>

080002da <LoopForever>:

LoopForever:
  b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000a04 	.word	0x08000a04
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>
	...

080002f8 <GPIO_PeriClockControl>:
 *
 * @Note			- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t ENorDI)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE){
 8000304:	78fb      	ldrb	r3, [r7, #3]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d141      	bne.n	800038e <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a45      	ldr	r2, [pc, #276]	@ (8000424 <GPIO_PeriClockControl+0x12c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000312:	4b45      	ldr	r3, [pc, #276]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000316:	4a44      	ldr	r2, [pc, #272]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800031e:	e07a      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOB){
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a42      	ldr	r2, [pc, #264]	@ (800042c <GPIO_PeriClockControl+0x134>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000328:	4b3f      	ldr	r3, [pc, #252]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032c:	4a3e      	ldr	r2, [pc, #248]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000334:	e06f      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOC){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a3d      	ldr	r2, [pc, #244]	@ (8000430 <GPIO_PeriClockControl+0x138>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800033e:	4b3a      	ldr	r3, [pc, #232]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000342:	4a39      	ldr	r2, [pc, #228]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034a:	e064      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOD){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a39      	ldr	r2, [pc, #228]	@ (8000434 <GPIO_PeriClockControl+0x13c>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000354:	4b34      	ldr	r3, [pc, #208]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000358:	4a33      	ldr	r2, [pc, #204]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000360:	e059      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOE){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a34      	ldr	r2, [pc, #208]	@ (8000438 <GPIO_PeriClockControl+0x140>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800036a:	4b2f      	ldr	r3, [pc, #188]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	4a2e      	ldr	r2, [pc, #184]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000370:	f043 0310 	orr.w	r3, r3, #16
 8000374:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000376:	e04e      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOH){
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a30      	ldr	r2, [pc, #192]	@ (800043c <GPIO_PeriClockControl+0x144>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d14a      	bne.n	8000416 <GPIO_PeriClockControl+0x11e>
			GPIOH_PCLK_EN();
 8000380:	4b29      	ldr	r3, [pc, #164]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a28      	ldr	r2, [pc, #160]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038c:	e043      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
	else if(ENorDI == DISABLE){
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d140      	bne.n	8000416 <GPIO_PeriClockControl+0x11e>
		if(pGPIOx == GPIOA){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a23      	ldr	r2, [pc, #140]	@ (8000424 <GPIO_PeriClockControl+0x12c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0xb2>
			GPIOA_PCLK_DI();
 800039c:	4b22      	ldr	r3, [pc, #136]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a21      	ldr	r2, [pc, #132]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	e035      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOB){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	@ (800042c <GPIO_PeriClockControl+0x134>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0xc8>
			GPIOB_PCLK_DI();
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003b8:	f023 0302 	bic.w	r3, r3, #2
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003be:	e02a      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOC){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <GPIO_PeriClockControl+0x138>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0xde>
			GPIOC_PCLK_DI();
 80003c8:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a16      	ldr	r2, [pc, #88]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003ce:	f023 0304 	bic.w	r3, r3, #4
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	e01f      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOD){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a16      	ldr	r2, [pc, #88]	@ (8000434 <GPIO_PeriClockControl+0x13c>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0xf4>
			GPIOD_PCLK_DI();
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a11      	ldr	r2, [pc, #68]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003e4:	f023 0308 	bic.w	r3, r3, #8
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ea:	e014      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOE){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <GPIO_PeriClockControl+0x140>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x10a>
			GPIOE_PCLK_DI();
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 80003fa:	f023 0310 	bic.w	r3, r3, #16
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e009      	b.n	8000416 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOH){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <GPIO_PeriClockControl+0x144>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d105      	bne.n	8000416 <GPIO_PeriClockControl+0x11e>
			GPIOH_PCLK_DI();
 800040a:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a06      	ldr	r2, [pc, #24]	@ (8000428 <GPIO_PeriClockControl+0x130>)
 8000410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40020000 	.word	0x40020000
 8000428:	40023800 	.word	0x40023800
 800042c:	40020400 	.word	0x40020400
 8000430:	40020800 	.word	0x40020800
 8000434:	40020c00 	.word	0x40020c00
 8000438:	40021000 	.word	0x40021000
 800043c:	40021c00 	.word	0x40021c00

08000440 <GPIO_Init>:
/*
 * Init and De-Init
 */

void GPIO_Init(GPIO_Handle_t* pGPIOHandle)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	// turn on the clock for the GPIO that is being setup
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff50 	bl	80002f8 <GPIO_PeriClockControl>

	// configure the mode of the gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d822      	bhi.n	80004a6 <GPIO_Init+0x66>
		// non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x11 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing bits
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	2111      	movs	r1, #17
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	400a      	ands	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting bits
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6819      	ldr	r1, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	430a      	orrs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	e095      	b.n	80005d2 <GPIO_Init+0x192>
	else{
		// interrupt mode

		//EXTI_PinConfig_t *pEXTI_PinConfig;
		//pEXTI_PinConfig->EXTI_FallingTrigger = EXTI_RTSR_EN
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	795b      	ldrb	r3, [r3, #5]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d117      	bne.n	80004de <GPIO_Init+0x9e>
			// configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b9f      	ldr	r3, [pc, #636]	@ (800072c <GPIO_Init+0x2ec>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a9b      	ldr	r2, [pc, #620]	@ (800072c <GPIO_Init+0x2ec>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c4:	4b99      	ldr	r3, [pc, #612]	@ (800072c <GPIO_Init+0x2ec>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	7912      	ldrb	r2, [r2, #4]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	43d2      	mvns	r2, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a95      	ldr	r2, [pc, #596]	@ (800072c <GPIO_Init+0x2ec>)
 80004d8:	400b      	ands	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
 80004dc:	e035      	b.n	800054a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	795b      	ldrb	r3, [r3, #5]
 80004e2:	2b05      	cmp	r3, #5
 80004e4:	d117      	bne.n	8000516 <GPIO_Init+0xd6>
			// configure the RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b91      	ldr	r3, [pc, #580]	@ (800072c <GPIO_Init+0x2ec>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7912      	ldrb	r2, [r2, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a8c      	ldr	r2, [pc, #560]	@ (800072c <GPIO_Init+0x2ec>)
 80004fa:	400b      	ands	r3, r1
 80004fc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b8b      	ldr	r3, [pc, #556]	@ (800072c <GPIO_Init+0x2ec>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	4611      	mov	r1, r2
 800050e:	4a87      	ldr	r2, [pc, #540]	@ (800072c <GPIO_Init+0x2ec>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
 8000514:	e019      	b.n	800054a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b06      	cmp	r3, #6
 800051c:	d115      	bne.n	800054a <GPIO_Init+0x10a>
			// configure the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b83      	ldr	r3, [pc, #524]	@ (800072c <GPIO_Init+0x2ec>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a7f      	ldr	r2, [pc, #508]	@ (800072c <GPIO_Init+0x2ec>)
 8000530:	430b      	orrs	r3, r1
 8000532:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b7d      	ldr	r3, [pc, #500]	@ (800072c <GPIO_Init+0x2ec>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a79      	ldr	r2, [pc, #484]	@ (800072c <GPIO_Init+0x2ec>)
 8000546:	430b      	orrs	r3, r1
 8000548:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 800054a:	4b79      	ldr	r3, [pc, #484]	@ (8000730 <GPIO_Init+0x2f0>)
 800054c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800054e:	4a78      	ldr	r2, [pc, #480]	@ (8000730 <GPIO_Init+0x2f0>)
 8000550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000554:	6453      	str	r3, [r2, #68]	@ 0x44
		uint8_t extiRegIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	089b      	lsrs	r3, r3, #2
 800055c:	72fb      	strb	r3, [r7, #11]
		uint8_t extiRegShift = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4 * 4;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	f003 0303 	and.w	r3, r3, #3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	72bb      	strb	r3, [r7, #10]
		uint8_t val = GPIO_To_SysCfgEntry(pGPIOHandle->pGPIOx);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f8e1 	bl	8000738 <GPIO_To_SysCfgEntry>
 8000576:	4603      	mov	r3, r0
 8000578:	727b      	strb	r3, [r7, #9]
		SYSCFG->EXTICR[extiRegIndex] &= ~(0xF << extiRegShift); // Clear the 4 bits
 800057a:	4a6e      	ldr	r2, [pc, #440]	@ (8000734 <GPIO_Init+0x2f4>)
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	3302      	adds	r3, #2
 8000580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000584:	7abb      	ldrb	r3, [r7, #10]
 8000586:	210f      	movs	r1, #15
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	4618      	mov	r0, r3
 8000590:	4968      	ldr	r1, [pc, #416]	@ (8000734 <GPIO_Init+0x2f4>)
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	4002      	ands	r2, r0
 8000596:	3302      	adds	r3, #2
 8000598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[extiRegIndex] |=  (val << extiRegShift); // Set new value
 800059c:	4a65      	ldr	r2, [pc, #404]	@ (8000734 <GPIO_Init+0x2f4>)
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	3302      	adds	r3, #2
 80005a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a6:	7a79      	ldrb	r1, [r7, #9]
 80005a8:	7abb      	ldrb	r3, [r7, #10]
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	4960      	ldr	r1, [pc, #384]	@ (8000734 <GPIO_Init+0x2f4>)
 80005b2:	7afb      	ldrb	r3, [r7, #11]
 80005b4:	4302      	orrs	r2, r0
 80005b6:	3302      	adds	r3, #2
 80005b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// enable the exti interrupt delivery using IMR
		// this unmasks the line corresponding to the pin
		// Ex. let PinNumber = 5, EXTI5 is now unmasked
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b5b      	ldr	r3, [pc, #364]	@ (800072c <GPIO_Init+0x2ec>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a57      	ldr	r2, [pc, #348]	@ (800072c <GPIO_Init+0x2ec>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
	}

	// configure the output type of the pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7a1b      	ldrb	r3, [r3, #8]
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing bits
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2301      	movs	r3, #1
 80005f0:	408b      	lsls	r3, r1
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6859      	ldr	r1, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	430a      	orrs	r2, r1
 800060c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]

	// configure the speed of the gpio pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	799b      	ldrb	r3, [r3, #6]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x11 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing bits
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	2111      	movs	r1, #17
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6899      	ldr	r1, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	430a      	orrs	r2, r1
 8000650:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]

	// configure the pupd of the pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	79db      	ldrb	r3, [r3, #7]
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x11 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing bits
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2111      	movs	r1, #17
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	68d9      	ldr	r1, [r3, #12]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	430a      	orrs	r2, r1
 8000694:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]

	// configure the alternate function mode of the pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d140      	bne.n	8000724 <GPIO_Init+0x2e4>
		temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7a5b      	ldrb	r3, [r3, #9]
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	d817      	bhi.n	80006f2 <GPIO_Init+0x2b2>
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing bits
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a1a      	ldr	r2, [r3, #32]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	210f      	movs	r1, #15
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	400a      	ands	r2, r1
 80006de:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a19      	ldr	r1, [r3, #32]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	621a      	str	r2, [r3, #32]
 80006f0:	e016      	b.n	8000720 <GPIO_Init+0x2e0>
		}
		else{
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing bits
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	210f      	movs	r1, #15
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	400a      	ands	r2, r1
 800070e:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	430a      	orrs	r2, r1
 800071e:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		temp = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
	}

}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013c00 	.word	0x40013c00
 8000730:	40023800 	.word	0x40023800
 8000734:	40013800 	.word	0x40013800

08000738 <GPIO_To_SysCfgEntry>:

/*
 * Misc
 */

uint8_t GPIO_To_SysCfgEntry(GPIO_RegDef_t* pGPIOx){
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	uint8_t val;
	if(pGPIOx == GPIOA){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <GPIO_To_SysCfgEntry+0x68>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d102      	bne.n	800074e <GPIO_To_SysCfgEntry+0x16>
		val = 0b0000;
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	e021      	b.n	8000792 <GPIO_To_SysCfgEntry+0x5a>
	}
	else if(pGPIOx == GPIOB){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <GPIO_To_SysCfgEntry+0x6c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d102      	bne.n	800075c <GPIO_To_SysCfgEntry+0x24>
		val = 0b0001;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e01a      	b.n	8000792 <GPIO_To_SysCfgEntry+0x5a>
	}
	else if(pGPIOx == GPIOC){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <GPIO_To_SysCfgEntry+0x70>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d102      	bne.n	800076a <GPIO_To_SysCfgEntry+0x32>
		val = 0b0010;
 8000764:	2302      	movs	r3, #2
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e013      	b.n	8000792 <GPIO_To_SysCfgEntry+0x5a>
	}
	else if(pGPIOx == GPIOD){
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <GPIO_To_SysCfgEntry+0x74>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d102      	bne.n	8000778 <GPIO_To_SysCfgEntry+0x40>
		val = 0b0011;
 8000772:	2303      	movs	r3, #3
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e00c      	b.n	8000792 <GPIO_To_SysCfgEntry+0x5a>
	}
	else if(pGPIOx == GPIOE){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a0d      	ldr	r2, [pc, #52]	@ (80007b0 <GPIO_To_SysCfgEntry+0x78>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d102      	bne.n	8000786 <GPIO_To_SysCfgEntry+0x4e>
		val = 0b0100;
 8000780:	2304      	movs	r3, #4
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e005      	b.n	8000792 <GPIO_To_SysCfgEntry+0x5a>
	}
	else if(pGPIOx == GPIOH){
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <GPIO_To_SysCfgEntry+0x7c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d101      	bne.n	8000792 <GPIO_To_SysCfgEntry+0x5a>
		val = 0b0111;
 800078e:	2307      	movs	r3, #7
 8000790:	73fb      	strb	r3, [r7, #15]
	}
	return val;
 8000792:	7bfb      	ldrb	r3, [r7, #15]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40021c00 	.word	0x40021c00

080007b8 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = Value; // value can be something like 0b010011101...
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	78fa      	ldrb	r2, [r7, #3]
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	405a      	eors	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx->ODR |= (1 << PinNumber);
	}*/
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <GPIO_IRQInterruptConfig>:
/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	if(ENorDI == ENABLE){
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d133      	bne.n	8000862 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	d80a      	bhi.n	8000816 <GPIO_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000800:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <GPIO_IRQInterruptConfig+0xf8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	2101      	movs	r1, #1
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	4611      	mov	r1, r2
 800080e:	4a33      	ldr	r2, [pc, #204]	@ (80008dc <GPIO_IRQInterruptConfig+0xf8>)
 8000810:	430b      	orrs	r3, r1
 8000812:	6013      	str	r3, [r2, #0]
		{
			// program ICER2 register
			*NVIC_ICER2 &= ~(1 << (IRQNumber % 64));
		}
	}
}
 8000814:	e05c      	b.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b1f      	cmp	r3, #31
 800081a:	d90f      	bls.n	800083c <GPIO_IRQInterruptConfig+0x58>
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000820:	d80c      	bhi.n	800083c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000822:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <GPIO_IRQInterruptConfig+0xfc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	f002 021f 	and.w	r2, r2, #31
 800082c:	2101      	movs	r1, #1
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a2a      	ldr	r2, [pc, #168]	@ (80008e0 <GPIO_IRQInterruptConfig+0xfc>)
 8000836:	430b      	orrs	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e049      	b.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000840:	d946      	bls.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b5f      	cmp	r3, #95	@ 0x5f
 8000846:	d843      	bhi.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <GPIO_IRQInterruptConfig+0x100>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f202 	lsl.w	r2, r1, r2
 8000858:	4611      	mov	r1, r2
 800085a:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <GPIO_IRQInterruptConfig+0x100>)
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	e036      	b.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
		if(IRQNumber <= 31)
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b1f      	cmp	r3, #31
 8000866:	d80b      	bhi.n	8000880 <GPIO_IRQInterruptConfig+0x9c>
			*NVIC_ICER0 &= ~(1 << IRQNumber);
 8000868:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <GPIO_IRQInterruptConfig+0x104>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	43d2      	mvns	r2, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <GPIO_IRQInterruptConfig+0x104>)
 800087a:	400b      	ands	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	e027      	b.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b1f      	cmp	r3, #31
 8000884:	d910      	bls.n	80008a8 <GPIO_IRQInterruptConfig+0xc4>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b3f      	cmp	r3, #63	@ 0x3f
 800088a:	d80d      	bhi.n	80008a8 <GPIO_IRQInterruptConfig+0xc4>
			*NVIC_ICER1 &= ~(1 << (IRQNumber % 32));
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <GPIO_IRQInterruptConfig+0x108>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	f002 021f 	and.w	r2, r2, #31
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	43d2      	mvns	r2, r2
 800089e:	4611      	mov	r1, r2
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <GPIO_IRQInterruptConfig+0x108>)
 80008a2:	400b      	ands	r3, r1
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e013      	b.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ac:	d910      	bls.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80008b2:	d80d      	bhi.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ICER2 &= ~(1 << (IRQNumber % 64));
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <GPIO_IRQInterruptConfig+0x10c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a09      	ldr	r2, [pc, #36]	@ (80008f0 <GPIO_IRQInterruptConfig+0x10c>)
 80008ca:	400b      	ands	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]
}
 80008ce:	e7ff      	b.n	80008d0 <GPIO_IRQInterruptConfig+0xec>
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000e104 	.word	0xe000e104
 80008e4:	e000e108 	.word	0xe000e108
 80008e8:	e000e180 	.word	0xe000e180
 80008ec:	e000e184 	.word	0xe000e184
 80008f0:	e000e188 	.word	0xe000e188

080008f4 <GPIO_PriorityConfig>:

void GPIO_PriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
	// calculate ipr register to set
	uint8_t prRegVal = IRQNumber/4;
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	73fb      	strb	r3, [r7, #15]
	uint8_t prRegShift = IRQNumber%4 * 8;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	73bb      	strb	r3, [r7, #14]

	*(NVIC_IPR_BASE_ADDR + prRegVal) |= (IRQPriority << (prRegShift + 4));
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800091e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	79b9      	ldrb	r1, [r7, #6]
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	3304      	adds	r3, #4
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	4619      	mov	r1, r3
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000938:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800093c:	430a      	orrs	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	// clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber))
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <GPIO_IRQHandling+0x3c>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4013      	ands	r3, r2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d009      	beq.n	800097c <GPIO_IRQHandling+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <GPIO_IRQHandling+0x3c>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	79fa      	ldrb	r2, [r7, #7]
 800096e:	2101      	movs	r1, #1
 8000970:	fa01 f202 	lsl.w	r2, r1, r2
 8000974:	4611      	mov	r1, r2
 8000976:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <GPIO_IRQHandling+0x3c>)
 8000978:	430b      	orrs	r3, r1
 800097a:	6153      	str	r3, [r2, #20]
	}
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40013c00 	.word	0x40013c00

0800098c <memset>:
 800098c:	4402      	add	r2, r0
 800098e:	4603      	mov	r3, r0
 8000990:	4293      	cmp	r3, r2
 8000992:	d100      	bne.n	8000996 <memset+0xa>
 8000994:	4770      	bx	lr
 8000996:	f803 1b01 	strb.w	r1, [r3], #1
 800099a:	e7f9      	b.n	8000990 <memset+0x4>

0800099c <__libc_init_array>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	4d0d      	ldr	r5, [pc, #52]	@ (80009d4 <__libc_init_array+0x38>)
 80009a0:	4c0d      	ldr	r4, [pc, #52]	@ (80009d8 <__libc_init_array+0x3c>)
 80009a2:	1b64      	subs	r4, r4, r5
 80009a4:	10a4      	asrs	r4, r4, #2
 80009a6:	2600      	movs	r6, #0
 80009a8:	42a6      	cmp	r6, r4
 80009aa:	d109      	bne.n	80009c0 <__libc_init_array+0x24>
 80009ac:	4d0b      	ldr	r5, [pc, #44]	@ (80009dc <__libc_init_array+0x40>)
 80009ae:	4c0c      	ldr	r4, [pc, #48]	@ (80009e0 <__libc_init_array+0x44>)
 80009b0:	f000 f818 	bl	80009e4 <_init>
 80009b4:	1b64      	subs	r4, r4, r5
 80009b6:	10a4      	asrs	r4, r4, #2
 80009b8:	2600      	movs	r6, #0
 80009ba:	42a6      	cmp	r6, r4
 80009bc:	d105      	bne.n	80009ca <__libc_init_array+0x2e>
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c4:	4798      	blx	r3
 80009c6:	3601      	adds	r6, #1
 80009c8:	e7ee      	b.n	80009a8 <__libc_init_array+0xc>
 80009ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ce:	4798      	blx	r3
 80009d0:	3601      	adds	r6, #1
 80009d2:	e7f2      	b.n	80009ba <__libc_init_array+0x1e>
 80009d4:	080009fc 	.word	0x080009fc
 80009d8:	080009fc 	.word	0x080009fc
 80009dc:	080009fc 	.word	0x080009fc
 80009e0:	08000a00 	.word	0x08000a00

080009e4 <_init>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr

080009f0 <_fini>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	bf00      	nop
 80009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	469e      	mov	lr, r3
 80009fa:	4770      	bx	lr
